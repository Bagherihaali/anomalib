:py:mod:`anomalib.models.cflow.anomaly_map`
===========================================

.. py:module:: anomalib.models.cflow.anomaly_map

.. autoapi-nested-parse::

   Anomaly Map Generator for CFlow model implementation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.models.cflow.anomaly_map.AnomalyMapGenerator




.. py:class:: AnomalyMapGenerator(image_size: Union[omegaconf.ListConfig, Tuple], pool_layers: List[str])

   Bases: :py:obj:`torch.nn.Module`

   Generate Anomaly Heatmap.

   .. py:method:: compute_anomaly_map(self, distribution: List[torch.Tensor], height: List[int], width: List[int]) -> torch.Tensor

      Compute the layer map based on likelihood estimation.

      :param distribution: Probability distribution for each decoder block
      :param height: blocks height
      :param width: blocks width

      :returns: Final Anomaly Map


   .. py:method:: forward(self, **kwargs: Union[List[torch.Tensor], List[int], List[List]]) -> torch.Tensor

      Returns anomaly_map.

      Expects `distribution`, `height` and 'width' keywords to be passed explicitly

      Example
      >>> anomaly_map_generator = AnomalyMapGenerator(image_size=tuple(hparams.model.input_size),
      >>>        pool_layers=pool_layers)
      >>> output = self.anomaly_map_generator(distribution=dist, height=height, width=width)

      :raises ValueError: `distribution`, `height` and 'width' keys are not found

      :returns: anomaly map
      :rtype: torch.Tensor



