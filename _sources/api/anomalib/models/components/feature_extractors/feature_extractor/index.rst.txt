:py:mod:`anomalib.models.components.feature_extractors.feature_extractor`
=========================================================================

.. py:module:: anomalib.models.components.feature_extractors.feature_extractor

.. autoapi-nested-parse::

   Feature Extractor.

   This script extracts features from a CNN network



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.models.components.feature_extractors.feature_extractor.FeatureExtractor




.. py:class:: FeatureExtractor(backbone: str, layers: List[str], pre_trained: bool = True)

   Bases: :py:obj:`torch.nn.Module`

   Extract features from a CNN.

   :param backbone: The backbone to which the feature extraction hooks are attached.
   :type backbone: nn.Module
   :param layers: List of layer names of the backbone to which the hooks are attached.
   :type layers: Iterable[str]

   .. rubric:: Example

   >>> import torch
   >>> from anomalib.core.model.feature_extractor import FeatureExtractor

   >>> model = FeatureExtractor(model="resnet18", layers=['layer1', 'layer2', 'layer3'])
   >>> input = torch.rand((32, 3, 256, 256))
   >>> features = model(input)

   >>> [layer for layer in features.keys()]
       ['layer1', 'layer2', 'layer3']
   >>> [feature.shape for feature in features.values()]
       [torch.Size([32, 64, 64, 64]), torch.Size([32, 128, 32, 32]), torch.Size([32, 256, 16, 16])]

   .. py:method:: _map_layer_to_idx(self, offset: int = 3) -> List[int]

      Maps set of layer names to indices of model.

      :param offset:
      :type offset: int

      :returns: Feature map extracted from the CNN


   .. py:method:: forward(self, input_tensor: torch.Tensor) -> Dict[str, torch.Tensor]

      Forward-pass input tensor into the CNN.

      :param input_tensor: Input tensor
      :type input_tensor: Tensor

      :returns: Feature map extracted from the CNN



