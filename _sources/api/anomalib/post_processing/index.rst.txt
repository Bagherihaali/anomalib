:py:mod:`anomalib.post_processing`
==================================

.. py:module:: anomalib.post_processing

.. autoapi-nested-parse::

   Methods to help post-process raw model outputs.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   normalization/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   post_process/index.rst
   visualizer/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.post_processing.Visualizer



Functions
~~~~~~~~~

.. autoapisummary::

   anomalib.post_processing.add_anomalous_label
   anomalib.post_processing.add_normal_label
   anomalib.post_processing.anomaly_map_to_color_map
   anomalib.post_processing.compute_mask
   anomalib.post_processing.superimpose_anomaly_map



.. py:function:: add_anomalous_label(image: numpy.ndarray, confidence: Optional[float] = None)

   Adds the anomalous label to the image.


.. py:function:: add_normal_label(image: numpy.ndarray, confidence: Optional[float] = None)

   Adds the normal label to the image.


.. py:function:: anomaly_map_to_color_map(anomaly_map: numpy.ndarray, normalize: bool = True) -> numpy.ndarray

   Compute anomaly color heatmap.

   :param anomaly_map: Final anomaly map computed by the distance metric.
   :type anomaly_map: np.ndarray
   :param normalize: Bool to normalize the anomaly map prior to applying
                     the color map. Defaults to True.
   :type normalize: bool, optional

   :returns: [description]
   :rtype: np.ndarray


.. py:function:: compute_mask(anomaly_map: numpy.ndarray, threshold: float, kernel_size: int = 4) -> numpy.ndarray

   Compute anomaly mask via thresholding the predicted anomaly map.

   :param anomaly_map: Anomaly map predicted via the model
   :type anomaly_map: np.ndarray
   :param threshold: Value to threshold anomaly scores into 0-1 range.
   :type threshold: float
   :param kernel_size: Value to apply morphological operations to the predicted mask. Defaults to 4.
   :type kernel_size: int

   :returns: Predicted anomaly mask


.. py:function:: superimpose_anomaly_map(anomaly_map: numpy.ndarray, image: numpy.ndarray, alpha: float = 0.4, gamma: int = 0, normalize: bool = False) -> numpy.ndarray

   Superimpose anomaly map on top of in the input image.

   :param anomaly_map: Anomaly map
   :type anomaly_map: np.ndarray
   :param image: Input image
   :type image: np.ndarray
   :param alpha: Weight to overlay anomaly map
                 on the input image. Defaults to 0.4.
   :type alpha: float, optional
   :param gamma: Value to add to the blended image
                 to smooth the processing. Defaults to 0. Overall,
                 the formula to compute the blended image is
                 I' = (alpha*I1 + (1-alpha)*I2) + gamma
   :type gamma: int, optional
   :param normalize: whether or not the anomaly maps should
                     be normalized to image min-max

   :returns: Image with anomaly map superimposed on top of it.
   :rtype: np.ndarray


.. py:class:: Visualizer

   Anomaly Visualization.

   The visualizer object is responsible for collating all the images passed to it into a single image. This can then
   either be logged by accessing the `figure` attribute or can be saved directly by calling `save()` method.

   .. rubric:: Example

   >>> visualizer = Visualizer()
   >>> visualizer.add_image(image=image, title="Image")
   >>> visualizer.close()

   .. py:method:: add_image(self, image: numpy.ndarray, title: str, color_map: Optional[str] = None)

      Add image to figure.

      :param image: Image which should be added to the figure.
      :type image: np.ndarray
      :param title: Image title shown on the plot.
      :type title: str
      :param color_map: Name of matplotlib color map used to map scalar data to colours. Defaults to None.
      :type color_map: Optional[str]


   .. py:method:: generate(self)

      Generate the image.


   .. py:method:: show(self)

      Show image on a matplotlib figure.


   .. py:method:: save(self, filename: pathlib.Path)

      Save image.

      :param filename: Filename to save image
      :type filename: Path


   .. py:method:: close(self)

      Close figure.



