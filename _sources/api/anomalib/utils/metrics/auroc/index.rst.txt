:py:mod:`anomalib.utils.metrics.auroc`
======================================

.. py:module:: anomalib.utils.metrics.auroc

.. autoapi-nested-parse::

   Implementation of AUROC metric based on TorchMetrics.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.utils.metrics.auroc.AUROC




.. py:class:: AUROC(num_classes: Optional[int] = None, pos_label: Optional[int] = None, **kwargs: Any)

   Bases: :py:obj:`torchmetrics.ROC`

   Area under the ROC curve.

   .. py:method:: compute(self) -> torch.Tensor

      First compute ROC curve, then compute area under the curve.

      :returns: Value of the AUROC metric
      :rtype: Tensor


   .. py:method:: update(self, preds: torch.Tensor, target: torch.Tensor) -> None

      Update state with new values.

      Need to flatten new values as ROC expects them in this format for binary classification.

      :param preds: predictions of the model
      :type preds: Tensor
      :param target: ground truth targets
      :type target: Tensor


   .. py:method:: _compute(self) -> Tuple[torch.Tensor, torch.Tensor]

      Compute fpr/tpr value pairs.

      :returns: Tuple containing Tensors for fpr and tpr


   .. py:method:: generate_figure(self) -> Tuple[matplotlib.figure.Figure, str]

      Generate a figure containing the ROC curve, the baseline and the AUROC.

      :returns: Tuple containing both the figure and the figure title to be used for logging
      :rtype: Tuple[Figure, str]



